# EBNF Grammar for the Caraml Language
# Author: Chubak Bidpaa

## EBNF Conventions
## Terminal, Single-Char   -> '<terminal>'
## Terminal, Multi-Char    -> "<terminal>"
## Repeat zero or more     -> { <non-terminal-or-rule> }
## Repeat once or more     -> <non-terminal-or-rule> { <non-terminal-or-rule> }
## Alternation             -> <non-terminal-or-rule> | <non-terminal-or-rule>
## Optional                -> [ <non-terminal-or-rule> ]
## Range                   -> <terminal> | ... | <terminal>
## Lexical Capture         -> ? <explanation> ?
## Comment                 -> # <comment> or ## <comment>

# The Syntactic Grammar

## Syntactic Grammar Section::A -> The Main Program

caraml-program	     ::= { module | toplevel-decls | comment }

module               ::= "module" alnum-identifier "where" toplevel-decls "end"

## Syntactic Grammar Section::B -> The Declarations

toplevel-decls       ::= { toplevel-decl | expression }
toplevel-decl        ::= value-decl
                     | type-decl
                     | datatype-decl
                     | infix-decl
                     | import-decl
		     | include-decl

local-decls	     ::= { local-decl | expression }
local-decl           ::= value-decl
		     | type-decl
		     | datatype-decl
		     | infix-decl
		     | open-decl

value-decl           ::= "val" alnum-identifier '=' expression-list ";;"
open-decl	     ::= "open" long-identifier ";;"
import-decl          ::= "import" long-identifier ";;"
include-decl	     ::= "include" string-literal ";;"
type-decl            ::= "type" alnum-identifier '=' type-expression ";;"
datatype-decl        ::= "datatype" alnum-identifier '=' constructor-list ";;"
record-decl	     ::= "record" alnum-identifier '=' record-type ";;"

infix-decl           ::= "infix" [ decimal-digit ] [ identifier ] infix-operator ";;"
                     | "infixr" [ decimal-digit ] [ identifier ] infix-operator ";;"
                     | "nonfix" infix-operator ";;"


## Syntactic Grammar Section::D -> The Expressions & Bindings

expression-list	     ::= expression { ';' expression }
expression           ::= pattern-list
                     | let-binding
		     | local-binding
		     | for-binding
		     | if-binding
		     | while-binding
		     | when-binding
		     | local-binding
		     | try-binding
		     | assign-binding
		     | raise-binding
		     | failwith-binding
                     | match-expression
                     | function-expression
		     | infix-expression
		     | prefix-expression
                     | '(' expression ')'


failwith-binding     ::= "failwith" expr
raise-binding	     ::= "raise" expr
assign-binding       ::= long-identifier "<-" expr
try-binding	     ::= "try" expression-list "with" match-expression
for-binding	     ::= "for" pattern "in" expression "do" expression-list "end"
when-binding	     ::= "when" pattern "do" expression-list "end"
while-binding	     ::= "while" pattern "do" expression-list "end"
if-binding	     ::= "if" pattern "then" expression-list "else" expression-list "end"
let-binding          ::= "let" [ "rec" ] pattern '=' expression-list [ "in" expression-list ]
local-binding	     ::= "local" local-decls "in" expression-list "end"

match-expression     ::= "match" expression "with" match-clauses "end"
match-clauses        ::= match-clause { '|' match-clause }
match-clause         ::= pattern "->" expr

function-expression  ::= "fun" pattern "->" expr

prefix-expression    ::= symb-identifier expression

infix-expression     ::= expression { infix-operator expression }

## Syntactic Grammar Section::E -> Types

constructor-list     ::= constructor { '|' constructor }
constructor          ::= con-identifier "of" type-expression

type-expression      ::= type-atom
                     | type-atom "->" type-expression
                     | polymorphic-type type-expression
                     | tuple-type

tuple-type           ::= type-expression { '*' type-expression }

type-atom            ::= alnum-identifier
                     | '(' type-expression ')'
                     | type-atom alnum-identifier
		     | basic-type

polymorphic-type     ::= '`' alnum-identifier

## Syntactic Grammar Section::F -> Records

record-type          ::= '{' field-list '}'
field-list           ::= field { ';' field }
field                ::= alnum-identifier ':' type-expression

record-literal       ::= '{' field-bindings '}'
field-bindings       ::= field-binding { ',' field-binding }
field-binding        ::= alnum-identifier '=' expr

## Syntactic Grammar Section::G -> Patterns

pattern              ::= pattern-constructor
                     | identifier-pattern
                     | literal-pattern
                     | wildcard-pattern
                     | list-pattern
		     | inductive-pattern
                     | '(' pattern-list ')'
		     | unit-pattern
		     | tuple-pattern


pattern-constructor  ::= con-identifier pattern-list

unit-pattern	     ::= "()"

pattern-list         ::= pattern-single { '|' pattern-single }
pattern-single       ::= identifier infix-expression
                     | list-pattern

tuple-pattern	     ::= '(' type-xpr  { "::" type-xpr } ')'

list-pattern	     ::= '[' type-expressionression { "::" type-expression } ']'

tuple-pattern 	     ::= '(' identifier ':' type-expression ')'
inductive-pattern    ::= identifier { "::" identifier }

identifier-pattern   ::= identifier { identifier }

literal-pattern      ::= literal-value
wildcard-pattern     ::= '_'

# Syntactic Grammar Section::E -> Literals & Identifiers

identifier           ::= alnum-identifier
                     | symb-identifier
                     | long-identifier

literal-value        ::= integer-literal
                     | string-literal
                     | character-literal
                     | float-literal
                     | list-literal
                     | tuple-literal
		     | record-literal

tuple-literal        ::= '(' literal-value { "::" literal-value } ')'

list-literal         ::= '[' list-item-list ']'

list-item-list       ::= list-item { ";;" list-item }

list-item            ::= literal-value
                     | identifier

float-literal        ::= decimal-integer '.' decimal-integer


integer-literal      ::= decimal-integer
                     | octal-integer
                     | hexadecimal-integer
                     | binary-integer

binary-integer       ::= binary-digit { binary-digit } 'B'
octal-integer        ::= octal-digit { octal-digit } 'O'
hexadecimal-integer  ::= hexadecimal-digit { hexadecimal-digit } 'H'
decimal-integer      ::= decimal-digit { decimal-digit }




# The Lexical Grammar

## Lexical Grammar Section::A -> Fundementals

infix-operator	     ::= symb-identifer

long-identifier      ::= alnum-identifier { '.' alnum-identifier }
symb-identifier      ::= ( punctuation | letter ) { punctuation | letter | digit }
alnum-identifier     ::= letter { letter | digit | "'" | '_' }
con-identifier       ::= upper-case { letter | digit | "'" | '_' }

character-literal    ::= '#"' ( c-escape-sequence | no-newline ) '"'
c-escape-sequence    ::= '\' ( hex-escape | unicode-escape | c-escape-chars )
hex-escape           ::= 'x' hex-digit [ hex-digit ]
unicode-escape       ::= "U+" hex-digit [ hex-digit [ hex-digit [ hex-digit ] ] ]
c-escape-chars       ::= 'a' | 'b'
                     | 'e' | 'f'
                     | 'n' | 'r'
                     | 't' | 'v'
                     | "'" | '"'


string-literal       ::= '"' { no-double-quote } '"'

binary-digit         ::= '0' | '1'
octal-digit          ::= '0' | '1' | ... | '7'
hexadecimal-digit    ::= decimal-digit | 'A' | ... | 'F' | 'a' | ... | 'f'
decimal-digit        ::= '0' | '1' | ... | '8' | '9'

punctuation          ::= '!' | '#' | '$' | '+' | '-' | '*' 
		     | '%' | '~' | '`' | '/' | '@' | '&' | '^' 
 

letter               ::= lower-case | upper-case
lower-case           ::= 'a' | 'b' | ... | 'y' | 'z'
upper-case           ::= 'A' | 'B' | ... | 'Y' | 'Z'

comment              ::= ";;" { no-newline } newline
                     | "(*" { any-char } "*)"

basic-type           ::= "int"
                     | "float"
                     | "char"
                     | "string"
                     | "bool"
                     | "list"
		     | "unit"
		     | "tuple"


## Lexical Grammar Section::B -> EBNF-only captures

newline              ::= '\n'
no-double-quote      ::= ? any-UTF8-character-except-double-quote ?
no-newline           ::= ? any-UTF8-character-except-newline ?
any-char             ::= ? any-UTF8-character ?

## Lexical Grammar Appendix -> The Regular Expressions for Lexical Tokens


regex::con-identifier 		<- ([A-Z][A-Za-z0-9_])+
regex::alnum-identifier		<- [A-Za-z'_][A-Za-z0-9']*
regex::symb-identifier		<- [-a-zA-Z'_]!#$+*%~`/@&^]+
regex::binary-integer		<- [0-1]+'B'
regex::octal-integer 		<- [0-7]+'O'
regex::hexadecimal-integer      <- [a-fA-F0-9]+'H'
regex::decimal-integer		<- [0-9]+
regex::float-literal		<- [0-9]+'.'[0-9]+
regex::string-literal		<- '"' [^"] '"'
regex::character-literal	<- '#"' [^"]{2} '"'








